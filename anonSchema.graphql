schema {
  query: RootQueryType
  mutation: RootMutationType
}

"""Notification for when a user's comment was marked as the answer"""
type AnswerAcceptedNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
  comment: Comment
}

"""Call to action for the user to earn cycles by answering questions"""
type AnswerToEarnCyclesCta {
  posts: [Post!]!
}

"""The default Repl.it Notification type"""
type BasicNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
}

"""A connection to a list of BasicNotifications."""
type BasicNotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of BasicNotifications."""
  items: [BasicNotification!]!
}

"""A board to post repls to"""
type Board {
  id: Int!
  name: String!
  description: String
  slug: String!
  cta: String
  titleCta: String
  bodyCta: String
  template: String
  buttonCta: String
  color: String
  replRequired: Boolean!
  isLocked: Boolean!
  isAnswerable: Boolean!
  isPrivate: Boolean!
  timeCreated: DateTime!
  timeUpdated: DateTime!
  url: String!
  posts(searchQuery: String, after: String, count: Int, order: String, languages: [String]): PostConnection
  canPost: Boolean!
}

"""A report on a post or comment"""
type BoardReport {
  id: Int!
  reason: String
  resolved: Boolean!
  timeCreated: String!
  creator: User
  type: String!
  post: Post
  comment: Comment
}

"""Settings for post + comment trending algorithm"""
type BoardTrendingAlgorithmSettings {
  id: String!
  postsExponent: Float!
  postsCommentWeight: Float!
  commentsExponent: Float!
}

"""A Repl.it Classroom"""
type Classroom {
  id: Int!
  name: String!
  timeCreated: DateTime!
  timeUpdated: DateTime!
  languageKey: String!
  description: String
  public: Boolean!
  views: Int!
  archived: Boolean!
  image: String
  communityUrl: String!
  assignmentCount: Int!
}

"""A comment on a post or another comment"""
type Comment {
  id: Int!
  body: String!
  voteCount: Int!
  timeCreated: DateTime!
  timeUpdated: DateTime!
  user: User
  url: String!
  post: Post
  parentComment: Comment
  comments: [Comment]
  isAuthor: Boolean!
  canEdit: Boolean!
  canVote: Boolean!
  canComment: Boolean!
  hasVoted: Boolean!
  canReport: Boolean!
  hasReported: Boolean!
  isAnswer: Boolean!
  canSelectAsAnswer: Boolean!
  canUnselectAsAnswer: Boolean!
  preview(length: Int, removeMarkdown: Boolean): String!
}

"""A connection to a list of Comments."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Comments."""
  items: [Comment!]!
}

"""A vote on a comment"""
type CommentVote {
  id: Int!
  user: User
  comment: Comment!
}

"""Call to action for the user to complete their profile"""
type CompleteProfileCta {
  fields: [String!]!
}

input CreateBoardInput {
  name: String!
  description: String
  cta: String
  titleCta: String
  bodyCta: String
  template: String
  buttonCta: String
  color: String
  replRequired: Boolean
  isLocked: Boolean
  isAnswerable: Boolean
  isPrivate: Boolean
}

type CreateBoardPayload {
  board: Board!
}

input CreateCommentInput {
  body: String!
  postId: Int
  commentId: Int
}

type CreateCommentPayload {
  comment: Comment!
}

input CreatePostInput {
  title: String!
  body: String!
  boardId: Int!
  replId: String
  showHosted: Boolean
}

type CreatePostPayload {
  post: Post!
}

"""Authenticated user"""
type CurrentUser {
  id: Int!
  username: String!
  firstName: String
  lastName: String
  bio: String
  isVerified: Boolean
  displayName: String!
  fullName: String!
  url: String!
  hasRole(role: UserRoles!): Boolean!
  roles(only: [UserRoles!]): [UserRole!]!
  isLoggedIn: Boolean!
  subscription: Subscription
  isSubscribed: Boolean!
  organization: Organization
  timeCreated: DateTime!

  """Finds the public repls for a user"""
  publicRepls(pinnedReplsFirst: Boolean, showUnnamed: Boolean, before: String, after: String, count: Int, order: String, direction: String): ReplConnection!

  """Finds the public classrooms for a user"""
  publicClassrooms: [Classroom]

  """Finds the user's posts"""
  posts(after: String, count: Int, order: String): PostConnection

  """Finds the user's comments"""
  comments(after: String, count: Int, order: String): CommentConnection

  """Determines whether a user is banned from talk/canny"""
  isBannedFromBoards: Boolean!

  """User karma, all-time or since"""
  karma(since: KarmaSince): Int!

  """Determines whether a user has a hacker plan"""
  isHacker: Boolean!
  email: String!
  gate(feature: String!): Boolean!
  gateVariation(feature: String!): String!
  tourSeen(name: String!): Boolean!
  cannySSOToken: String!
  canUpdate(column: UserUpdateColumns!): Boolean!
  replSearch(search: String!): [Repl]
  suggestedIntroPost: Post
  state: UserState
  suggestedTutorials(count: Int): [Tutorial!]!
  feed(searchQuery: String, after: String, count: Int, order: String, boardSlugs: [String]): PostConnection

  """
  A list of langauges the current user has coded in, and optially the langauges they have selected as interested in
  """
  languages(includeInterestedIn: Boolean, limit: Int): [Language!]!
  callToActions(includeInterestedIn: Boolean, limit: Int): [CurrentUserCtas!]!
  boards: [Board!]!
  device: UserDevice!
  sidebarClosed: Boolean!
  search: UserSearchResults!
  image: String!
}

"""Various call to actions for the user"""
union CurrentUserCtas = IntroduceYourselfCta | AnswerToEarnCyclesCta | CompleteProfileCta

union DashboardItem = Repl | ReplFolder

"""A repls search result item"""
type DashboardSearchOption {
  label: String!
  value: String!
  type: String!
  url: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Enterprise account"""
type Enterprise {
  id: Int!
  organizationId: Int!
  startDate: DateTime!
  endDate: DateTime!
  teacherSeats: Int!
  studentSeats: Int!
  admin: User
  organization: Organization
}

type enterpriseInviteHash {
  enterprise: Enterprise
  invite: EnterpriseTeacherInvites
}

"""A list of enterprise account teachers"""
type EnterpriseTeacher {
  teacherId: Int!
  enterpriseId: Int!
  enterprise: Enterprise
}

"""A list of teacher invites"""
type EnterpriseTeacherInvites {
  email: String!
  enterpriseId: Int!
  enterprise: Enterprise
  link: String!
}

type enterpriseWithSeats {
  """enterprise"""
  enterprise: Enterprise

  """A list of teachers"""
  teachers: [User]
  invites: [EnterpriseTeacherInvites]
}

"""
Call to action for the user to introduce themselves in the comments of the "Inroduce Yourself" post
"""
type IntroduceYourselfCta {
  post: Post!
}

enum KarmaSince {
  PAST_24_HOURS
  PAST_7_DAYS
  PAST_30_DAYS
  PAST_YEAR
}

"""A repl language from @replit/languages"""
type Language {
  id: String!
  displayName: String!
  key: String!
  category: String!
  tagline: String!
  icon: String
  isNew: Boolean
}

"""Notification for when a user is at-metioned in a comment"""
type MentionedInCommentNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
  comment: Comment
}

"""Notification for when a user is at-metioned in a post"""
type MentionedInPostNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
  post: Post
}

enum multiplayer_invitestypeEnumType {
  r
  rw
}

"""An emailed invite to join repl.it multiplayer"""
type MultiplayerInvite {
  email: String!
  replId: String!
  type: multiplayer_invitestypeEnumType!
}

"""
Notification for when a user gets an invite to collab on a multiplayer repl
"""
type MultiplayerInvitedNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
}

"""
Notification for when a user joined a multiplayer session via email invite
"""
type MultiplayerJoinedEmailNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
}

"""
Notification for when a user joined a multiplayer session via email link
"""
type MultiplayerJoinedLinkNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
}

"""
Notification for when a user tried to join a multiplayer session but couldnt due to limits
"""
type MultiplayerOverlimitNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
}

union Notification = BasicNotification | RepliedToPostNotification | RepliedToCommentNotification | MentionedInCommentNotification | MentionedInPostNotification | AnswerAcceptedNotification | MultiplayerJoinedEmailNotification | MultiplayerJoinedLinkNotification | MultiplayerInvitedNotification | MultiplayerOverlimitNotification

"""A connection to a list of Notifications."""
type NotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Notifications."""
  items: [Notification!]!
}

enum NotificationContext {
  classroom
  board
  multiplayer
}

"""Organization account"""
type Organization {
  id: Int!
  name: String!
  country: String!
  postalCode: String
  state: String
  city: String
  googlePlaceId: String
  timeCreated: String!
  timeUpdated: String
  timeDeleted: String
  time_created: DateTime!
}

"""Information about pagination in a connection."""
type PageInfo {
  """Next results available"""
  hasNextPage: Boolean!

  """Previous results available"""
  hasPreviousPage: Boolean!

  """Cursor to fetch next page"""
  nextCursor: String

  """Cursor to fetch previous page"""
  previousCursor: String
}

"""A board to post repls to"""
type Post {
  id: Int!
  title: String!
  body: String!
  showHosted: Boolean
  voteCount: Int!
  commentCount: Int!
  isPinned: Boolean
  isLocked: Boolean
  timeCreated: DateTime!
  timeUpdated: DateTime!
  url: String!
  user: User
  board: Board!
  repl: Repl
  comments(after: String, count: Int, order: String): CommentConnection

  """Finds a post's votes"""
  votes(before: String, after: String, count: Int, order: String, direction: String): PostVoteConnection
  isAnnouncement: Boolean!
  isAuthor: Boolean!
  canEdit: Boolean!
  canComment: Boolean!
  canVote: Boolean!
  canPin: Boolean!
  canSetType: Boolean!
  canChangeBoard: Boolean!
  canLock: Boolean!
  hasVoted: Boolean!
  canReport: Boolean!
  hasReported: Boolean!
  isAnswered: Boolean!
  isAnswerable: Boolean!
  answeredBy: User
  answer: Comment
  tutorialPages: [String]
  preview(length: Int, removeMarkdown: Boolean): String!
  recentComments(count: Int): [Comment!]
}

"""A connection to a list of Posts."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Posts."""
  items: [Post!]!
}

"""A board to post repls to"""
type PostVote {
  id: Int!
  user: User
  post: Post
}

"""A connection to a list of PostVotes."""
type PostVoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of PostVotes."""
  items: [PostVote!]!
}

"""Web protocols"""
enum Protocols {
  HTTPS
  WSS
}

"""A repl"""
type Repl {
  id: String!
  language: String!
  isProject: Boolean!
  isPrivate: Boolean!
  isStarred: Boolean!
  title: String!
  slug: String!
  description: String
  folderId: String
  isRenamed: Boolean
  user: User
  lang: Language!
  languageDisplayName: String! @deprecated(reason: "Use repl.lang.displayName")
  url(lite: Boolean): String!
  timeCreated: DateTime!
  timeUpdated: DateTime!
  isOwner: Boolean
  tags: [String]
  config: ReplConfig!
  pinnedToProfile: Boolean!
  canWrite: Boolean!
  screenshot: String
  files: [String!]!
  hostedUrl(dotty: Boolean, protocol: Protocols): String!
  terminalUrl: String!
  currentUser: CurrentUser
}

enum repl_permissionstypeEnumType {
  r
  rw
}

type ReplConfig {
  isServer: Boolean
  gitRemoteUrl: String
  domain: String
  isVnc: String
}

"""A connection to a list of Repls."""
type ReplConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Repls."""
  items: [Repl!]!
}

"""A folder of repls"""
type ReplFolder {
  id: String!
  name: String!
  parentId: String
  timeCreated: DateTime!
  timeUpdated: DateTime!
  path: String!
}

"""Notification for when a user's comment has been replied to"""
type RepliedToCommentNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
  comment: Comment
}

"""Notification for when a user's post is commented on"""
type RepliedToPostNotification {
  id: Int!
  url: String!
  text: String
  seen: Boolean!
  context: String!
  creator: User
  timeCreated: DateTime!
  timeUpdated: DateTime!
  comment: Comment
}

"""Access permissions for a repl"""
type ReplPermission {
  id: Int!
  userId: Int!
  replId: String
  type: repl_permissionstypeEnumType!
  timeCreated: DateTime!
  timeUpdated: DateTime!
  repl: Repl
  user: User
}

"""A connection to a list of ReplPermissions."""
type ReplPermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of ReplPermissions."""
  items: [ReplPermission!]!
}

"""A template for repls"""
type ReplTemplate {
  id: Int!
  imageUrl: String!
  hoverImageUrl: String
  order: Int
  repl: Repl!
  author: User!
}

"""The top level entry point for querying the graph"""
type RootQueryType {
  """Finds a single user via a unique identifier"""
  user(id: Int!): User

  """Find a repl by id type"""
  repl(id: String, url: String): Repl

  """Finds a single enterprise via a unique identifier"""
  enterprise(id: Int!): Enterprise

  """Finds a single organization via a unique identifier"""
  organization(id: Int!): Organization

  """A Board"""
  board(id: Int!): Board

  """A Post"""
  post(id: Int!): Post

  """A Comment"""
  comment(id: Int!): Comment

  """Finds recent repls"""
  newRepls(before: String, after: String, count: Int, order: String, direction: String, lang: String): ReplConnection

  """Finds the curent user's seen state of a tour."""
  toursSeen(name: String!): ToursSeenQueryResult!

  """Find repls, tags, and languages."""
  dashboardSearch(search: String): [DashboardSearchOption!]!

  """Finds recently edited repls"""
  recentRepls(count: Int = 3): [Repl!]!

  """Finds a board by slug"""
  boards(slugs: [String], private: Boolean): [Board!]!

  """Finds a board by slug"""
  boardBySlug(slug: String!): Board

  """Finds all posts"""
  posts(after: String, searchQuery: String, count: Int, order: String, languages: [String!], boardSlugs: [String!], pinPinned: Boolean, pinAnnouncements: Boolean, answerable: Boolean, answered: Boolean, minVoteCount: Int, trendingEligibleOnly: Boolean): PostConnection!

  """A user's profile"""
  userByUsername(username: String!): User

  """Finds users order by karma"""
  leaderboard(after: String, count: Int, order: String, since: KarmaSince): UserConnection!

  """Finds the repls and folders within a folder"""
  replFoldersInId(parentId: String): [ReplFolder!]!

  """Finds a folder from its ID"""
  replFolderByPath(path: String!): ReplFolder

  """Finds a folder from its ID"""
  replFolderParentById(folderId: String): ReplFolder

  """Whether or not the user has any repls"""
  hasRepls: Boolean!

  """Finds the number of repls in your unnamed repls folder"""
  unnamedReplsCount: Int!

  """Returns @mention suggestions based on context and search string"""
  atMentionSuggestions(search: String, contextType: String, contextId: Int, limit: Int): [User]

  """Gets templates for repls"""
  replTemplates: [ReplTemplate!]!

  """Finds all the permissions for a repl"""
  replPermissionsByRepl(replId: String!): [ReplPermission!]!

  """Finds the current user's notifications"""
  notifications(after: String, count: Int): NotificationConnection!

  """Finds the current user's unread notification count"""
  notificationCount(context: NotificationContext): Int!

  """Finds the current user's classroom notifications"""
  classroomNotifications(after: String, count: Int): BasicNotificationConnection!

  """Creates ore generates a multiplayer invite link"""
  multiplayerInviteLink(replId: String!): String!

  """Finds all the multiplayer invites for a repl"""
  multiplayerEmailInvites(replId: String!): [MultiplayerInvite!]!

  """Finds users whose usernames start with a given query"""
  usernameSearch(query: String!, limit: Int): [User!]!

  """Admin object"""
  admin: Admin

  """Finds all the permissions for a repl"""
  sharedRepls(before: String, after: String, count: Int, order: String, direction: String): ReplPermissionConnection!

  """Finds tutorials"""
  tutorials(languages: [String!]): [Tutorial!]!

  """Search organizations"""
  organizations(term: String!): [Organization!]!
}

union SendUserVerificationEmailOutput = UserVerificationEmailSent | UserVerificationAlreadyVerified

"""Subscription information"""
type Subscription {
  id: Int!
  userId: Int!
  customerId: String
  planId: String!
  timeUpdated: String
  timeCreated: String!
  timeDeleted: String
}

type ToursSeenMuationResult {
  name: String!
  success: Boolean!
}

"""If a user has seen a given tour."""
type ToursSeenQueryResult {
  seen: Boolean!
}

"""A tutorial from Repl Talk / Learn"""
type Tutorial {
  id: String!
  post: Post
  category: TutorialCategory!
  lang: Language
}

"""A category of tutorials from Repl Talk / Learn"""
type TutorialCategory {
  id: String!
  name: String!
  tutorials: [Tutorial!]!
  image: TutorialCategoryImage
}

"""A an image for a TutorialCategory"""
type TutorialCategoryImage {
  id: Int!
  url: String!
}

union UpdateUserOutput = CurrentUser | UserError

"""A user of Replit"""
type User {
  id: Int!
  username: String!
  firstName: String
  lastName: String
  bio: String
  isVerified: Boolean
  displayName: String!
  fullName: String!
  url: String!
  hasRole(role: UserRoles!): Boolean!
  roles(only: [UserRoles!]): [UserRole!]!
  isLoggedIn: Boolean!
  subscription: Subscription
  isSubscribed: Boolean!
  organization: Organization
  timeCreated: DateTime!

  """Finds the public repls for a user"""
  publicRepls(pinnedReplsFirst: Boolean, showUnnamed: Boolean, before: String, after: String, count: Int, order: String, direction: String): ReplConnection!

  """Finds the public classrooms for a user"""
  publicClassrooms: [Classroom]

  """Finds the user's posts"""
  posts(after: String, count: Int, order: String): PostConnection

  """Finds the user's comments"""
  comments(after: String, count: Int, order: String): CommentConnection

  """Determines whether a user is banned from talk/canny"""
  isBannedFromBoards: Boolean!

  """User karma, all-time or since"""
  karma(since: KarmaSince): Int!

  """Determines whether a user has a hacker plan"""
  isHacker: Boolean!

  """A list of langauges the user has coded in"""
  languages(limit: Int): [Language!]!
  image: String!
}

"""A connection to a list of Users."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of Users."""
  items: [User!]!
}

"""User device info"""
type UserDevice {
  isMobile: Boolean!
  isMac: Boolean!
}

"""A user error"""
type UserError {
  id: String!
  message: String!
}

"""A role belonging to a user"""
type UserRole {
  id: String!
  key: UserRoles!
  name: String!
  tagline: String
}

enum UserRoles {
  SELF_LEARNER
  TEACHER
  STUDENT
  ADMIN
  MODERATOR
  EXPLORER
  CONTENT_CREATOR
  DETECTIVE
  TESTER
  DEVELOPER
}

"""Grouped Search results for authenticated user"""
type UserSearchResults {
  repls(query: String, count: Int): [Repl!]!
  posts(query: String, count: Int): [Post!]!
  languages(query: String, count: Int): [Language!]!
}

"""An object for keeping user state"""
type UserState {
  id: Int!
  skillLevel: String
  interestedIn: String
  languagesInterestedIn: [Language!]!
}

enum UserUpdateColumns {
  EMAIL
  USERNAME
}